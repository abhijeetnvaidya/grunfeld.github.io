var WALL = 0;
var OPEN = 1;
var GATE = 2;
var PATH = 3;
var EXIT = 4;
var TEXT_BASED_DRAWING = 1;

var board = function(R, C, canvas_element_name, font_size = 12) {
    this.R             = R;  // #of rows
    this.C             = C;  // #of columns
    this.CANVAS_NAME   = canvas_element_name;
    this.cell_x        = 11; // Cell width in characters
    this.cell_y        = 5;  // Cell height in characters
    this.X_OFFSET      = 0;
    this.Y_OFFSET      = 0;
    this.ARENA_WIDTH   = 0;
    this.ARENA_HEIGHT  = 0;
    this.FONT_SIZE     = font_size;
    this.WALL_CHAR     = "X";
    this.PATH_CHAR     = "@";
    this.VERT_SEP_CHAR = ".";
    this.HORI_SEP_CHAR = ".";
    
    this.row_midpoints = new Array(this.R+1);
    for (let i = 0; i < this.R+1; ++i)
        this.row_midpoints[i] = new Array(this.C);
    this.col_midpoints = new Array(this.R);
    for (let i = 0; i < this.R; ++i)
        this.col_midpoints[i] = new Array(this.C+1);

    this.orig_row_data = new Array(this.R+1);
    for (let i = 0; i < this.R+1; ++i)
        this.orig_row_data[i] = new Array(this.C);
    this.orig_col_data = new Array(this.R);
    for (let i = 0; i < this.R; ++i)
        this.orig_col_data[i] = new Array(this.C+1);

    this.curr_row_data = new Array(this.R+1);
    for (let i = 0; i < this.R+1; ++i)
        this.curr_row_data[i] = new Array(this.C);
    this.curr_col_data = new Array(this.R);
    for (let i = 0; i < this.R; ++i)
        this.curr_col_data[i] = new Array(this.C+1);

    this.res = new Array(this.R);
    for (let i = 0; i < this.R; ++i)
        this.res[i] = new Array(this.C);
    this.adj_list = new Array(this.R * this.C);
    this.colormap = new Array(this.R * this.C);

    this.Draw = function(row_data, col_data, hole_data, update_state = true) {
        let image_rows = this.R * this.cell_y + this.R+1;
        let image_cols = this.C * this.cell_x + this.C+1 + 1;

        let image = new Array(image_rows);
        for (let r = 0; r < image_rows; r++)
            image[r] = new Array(image_cols);
        for (let r = 0; r < image_rows; ++r)
            for (let c = 0; c < image_cols; ++c)
                image[r][c] = " ";

        // Draw row grid
        for (let i = 0; i < this.R+1; i++) {
            for (let j = 0; j < this.C; j++) {
                let edge_type = row_data[i][j];
                let start_row = (this.cell_y+1) * i;
                let start_col = (this.cell_x+1) * j;
                if (edge_type === WALL) {
                    for (let a = start_col; a < start_col + this.cell_x + 2; ++a)
                       image[start_row][a] = this.WALL_CHAR;
                } else if (edge_type === OPEN) {
                    for (let a = start_col; a < start_col + this.cell_x + 2; ++a)
                        if (image[start_row][a] != this.WALL_CHAR) // if columns are drawn before rows
                            image[start_row][a] = this.HORI_SEP_CHAR;
                } else if (edge_type === GATE) {
                    for (let a = start_col; a < start_col + this.cell_x + 2; ++a) {
                        if ((a - start_col) < 5 || (a - start_col) > 7)
                            image[start_row][a] = this.WALL_CHAR;
                    }
                } else if (edge_type == PATH) {
                    for (let a = start_col; a < start_col + this.cell_x + 2; ++a)
                        if (image[start_row][a] != this.WALL_CHAR)
                            image[start_row][a] = this.HORI_SEP_CHAR;
                    for (let b = start_row-3; b <= start_row+3; ++b)
                        image[b][start_col+6] = this.PATH_CHAR;
                } else if (edge_type == EXIT) {
                    for (let a = start_col; a < start_col + this.cell_x + 2; ++a)
                        if ((a - start_col) < 5 || (a - start_col) > 7)
                            image[start_row][a] = this.WALL_CHAR;
                    for (let b = start_row-3; b <= start_row+3; ++b)
                        if (b >= 0 && b < image_rows)
                            image[b][start_col+6] = this.PATH_CHAR;
                }
            }
        }

        // Draw column grid
        for (let i = 0; i < this.R; i++) {
            for (let j = 0; j < this.C+1; j++) {
                let edge_type = col_data[i][j];
                let start_row = (this.cell_y+1) * i;
                let start_col = (this.cell_x+1) * j;
                if (edge_type === WALL) {
                    for (let a = start_row; a < start_row + this.cell_y + 2; ++a) {
                        image[a][start_col] = this.WALL_CHAR;
                        if (TEXT_BASED_DRAWING)
                            image[a][start_col+1] = this.WALL_CHAR;
                    }
                } else if (edge_type === OPEN) {
                    for (let a = start_row; a < start_row + this.cell_y + 2; ++a)
                        if (image[a][start_col] != this.WALL_CHAR) // since rows are drawn before columns
                            image[a][start_col] = this.VERT_SEP_CHAR;
                } else if (edge_type === GATE) {
                    for (let a = start_row; a < start_row + this.cell_y + 2; ++a) {
                        if ((a - start_row) != 3) {
                            image[a][start_col] = this.WALL_CHAR;
                            if (TEXT_BASED_DRAWING)
                                image[a][start_col+1] = this.WALL_CHAR;
                        }
                    }
                } else if (edge_type == PATH) {
                    for (let a = start_row; a < start_row + this.cell_y + 2; ++a)
                        if (image[a][start_col] != this.WALL_CHAR)
                            image[a][start_col] = this.VERT_SEP_CHAR;
                    let alternate = 0;
                    for (let b = start_col-6; b <= start_col+6; ++b) {
                        if (alternate === 0)
                            image[start_row+3][b] = this.PATH_CHAR;
                        else
                            image[start_row+3][b] = " ";
                        alternate = 1 - alternate;
                    }
                } else if (edge_type == EXIT) {
                    for (let a = start_row; a < start_row + this.cell_y + 2; ++a) {
                        if ((a - start_row) != 3) {
                            image[a][start_col] = this.WALL_CHAR;
                            if (TEXT_BASED_DRAWING)
                                image[a][start_col+1] = this.WALL_CHAR;
                        }
                    }
                    let alternate = 0;
                    for (let b = start_col-6; b <= start_col+6; ++b) {
                        if (b >= 0 && b < image_cols) {
                            if (alternate === 0)
                                image[start_row+3][b] = this.PATH_CHAR;
                            else
                                image[start_row+3][b] = " ";
                            alternate = 1 - alternate;
                        }
                    }
                }
            }
        }

        if (TEXT_BASED_DRAWING) {
            let font_dim      = MeasureText("/", true, "Roboto Mono, Courier, monospace", this.FONT_SIZE);
            this.ARENA_WIDTH  = this.C * this.cell_x * font_dim[0] + (this.C + 2) * font_dim[0]; // this.C + 2 because vertical walls are 2-chars long
            this.ARENA_HEIGHT = this.R * this.cell_y * font_dim[1] + (this.R + 1) * font_dim[1];

            // canvas size is changed at runtime
            let canvas        = document.getElementById(this.CANVAS_NAME);
            canvas.width      = this.ARENA_WIDTH + font_dim[0] + 20; // +20 is a hack for Chrome, especially for the width
            canvas.height     = this.ARENA_HEIGHT + font_dim[1] + 20;
            let ctx           = canvas.getContext("2d");
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.font          = "bold " + this.FONT_SIZE + "pt Roboto Mono, monospace";
            ctx.textBaseline  = "hanging";
            ctx.shadowBlur    = 10;
            ctx.shadowColor   = "brown";
            ctx.fillStyle     = "black";
            //ctx.setLineDash([1, 16]);
            for (let i = 0; i < image_rows; ++i) {
                let text = "";
                for (let j = 0; j < image_cols; ++j)
                    text += image[i][j];
                ctx.fillText(text, this.X_OFFSET, font_dim[1]*i + this.Y_OFFSET);
                //console.log(text.length);
                //console.log(ctx.measureText(text).width);
            }
            // Drawing Chequered squares
            let rect_width  = this.cell_x * font_dim[0];
            let rect_height = this.cell_y * font_dim[1];
            let rect_y      = this.Y_OFFSET + font_dim[1];
            for (let i = 0; i < this.R; ++i) {
                let rect_x = this.X_OFFSET + font_dim[0];
                for (let j = 0; j < this.C; ++j) {
                    if ((i + j) % 2)
                        ctx.fillStyle="rgba(200, 200, 200, 0.1)";
                    else
                        ctx.fillStyle="rgba(50, 50, 50, 0.12)";
                    ctx.fillRect(rect_x, rect_y, rect_width, rect_height);
                    rect_x += (rect_width + font_dim[0]);
                }
                rect_y += (rect_height + font_dim[1]);
            }
        } else { // TODO - Work in progress
            let block_size_y  = 30;
            let aspect_ratio  = image_cols / image_rows;
            let block_size_x  = block_size_y / aspect_ratio;
            this.ARENA_WIDTH  = this.C * this.cell_x * block_size_x + (this.C + 1) * block_size_x;
            this.ARENA_HEIGHT = this.R * this.cell_y * block_size_y + (this.R + 1) * block_size_y;
            // canvas size is changed at runtime
            let canvas        = document.getElementById(this.CANVAS_NAME);
            canvas.width      = this.ARENA_WIDTH  + 20; // +20 is a hack for Chrome, especially for the width
            canvas.height     = this.ARENA_HEIGHT + 20;
            let ctx           = canvas.getContext("2d");
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            //ctx.shadowBlur    = 10;
            //ctx.shadowColor   = "brown";
            ctx.fillStyle     = "black";
            for (let i = 0; i < image_rows; ++i) {
                let text = "";
                for (let j = 0; j < image_cols; ++j)
                    text += image[i][j];
                this.ConvertTextToDrawing(ctx, text, block_size_y*i + this.Y_OFFSET, block_size_x, block_size_y);
            }
            /*
            // Drawing Chequered squares
            let rect_width  = this.cell_x * font_dim[0];
            let rect_height = this.cell_y * font_dim[1];
            let rect_y      = this.Y_OFFSET + font_dim[1];
            for (let i = 0; i < this.R; ++i) {
                let rect_x = this.X_OFFSET + font_dim[0];
                for (let j = 0; j < this.C; ++j) {
                    if ((i + j) % 2)
                        ctx.fillStyle="rgba(200, 200, 200, 0.1)";
                    else
                        ctx.fillStyle="rgba(50, 50, 50, 0.12)";
                    ctx.fillRect(rect_x, rect_y, rect_width, rect_height);
                    rect_x += (rect_width + font_dim[0]);
                }
                rect_y += (rect_height + font_dim[1]);
            }
            */
        }

        if (update_state) {
            this.CalculateSegmentMidpoints(this.ARENA_WIDTH, this.ARENA_HEIGHT);
            // NOTE - Deep copy is necessary
            for (let i = 0; i < this.R+1; ++i) {
                for (let j = 0; j < this.C; ++j) {
                    this.orig_row_data[i][j] = row_data[i][j];
                    this.curr_row_data[i][j] = row_data[i][j];
                }
            }
            for (let i = 0; i < this.R; ++i) {
                for (let j = 0; j < this.C+1; ++j) {
                    this.orig_col_data[i][j] = col_data[i][j];
                    this.curr_col_data[i][j] = col_data[i][j];
                }
            }
            this.orig_hole_data = hole_data.slice(); // FIXME - deep copy
        }
    };

    this.ConvertTextToDrawing = function(ctx, text, y, block_size_x, block_size_y) { // TODO - Work in progress
        let x = this.X_OFFSET;
        for (let i = 0; i < text.length; ++i) {
            if (text[i] == "") {
                ctx.fillStyle="rgba(50, 50, 50, 0)";
            } else if (text[i] == this.WALL_CHAR) {
                ctx.fillStyle="rgba(50, 50, 50, 0.12)";
            } else {
                ctx.fillStyle="rgba(150, 150, 150, 0.12)";
            }
            ctx.fillRect(x, y, block_size_x, block_size_y);
            x += block_size_x;
        }
    }

    this.Redraw = function(row_data, col_data, hole_data) {
        this.Draw(row_data, col_data, hole_data, false);
    };

    this.CalculateSegmentMidpoints = function(board_width, board_height) {
        let hori_segment_len = board_width / this.C;
        let vert_segment_len = board_height / this.R;

        // Processing for the horizontal segments (rows)
        for (let i = 0; i < this.R+1; ++i) {
            for (let j = 0; j < this.C; ++j) {
                let mid_x = j * hori_segment_len + hori_segment_len / 2;
                let mid_y = i * vert_segment_len;
                this.row_midpoints[i][j] = {x: mid_x, y: mid_y};
            }
        }
        // Processing for the vertical segments (columns)
        for (let i = 0; i < this.R; ++i) {
            for (let j = 0; j < this.C+1; ++j) {
                let mid_x = j * hori_segment_len;
                let mid_y = i * vert_segment_len + vert_segment_len / 2;
                this.col_midpoints[i][j] = {x: mid_x, y:  mid_y};
            }
        }
    };

    this.Click = function(x, y) {
        // Determine the closest row or column segment
        let closest_to_col = false;
        let min_dist = 100000000;
        let min_dist_loc = {r: -1, c: -1};
        for (let i = 0; i < this.R+1; ++i) {
            for (let j = 0; j < this.C; ++j) {
                let midpoint = this.row_midpoints[i][j];
                let dist = (midpoint.x - x)*(midpoint.x - x) + (midpoint.y - y)*(midpoint.y - y);
                if (dist < min_dist) {
                    min_dist_loc.r = i;
                    min_dist_loc.c = j;
                    closest_to_col = false;
                    min_dist = dist;
                }
            }
        }
        for (let i = 0; i < this.R; ++i) {
            for (let j = 0; j < this.C+1; ++j) {
                let midpoint = this.col_midpoints[i][j];
                let dist = (midpoint.x - x)*(midpoint.x - x) + (midpoint.y - y)*(midpoint.y - y);
                if (dist < min_dist) {
                    min_dist_loc.r = i;
                    min_dist_loc.c = j;
                    closest_to_col = true;
                    min_dist = dist;
                }
            }
        }

        //console.log("closest to a column? " + closest_to_col);
        //console.log("{r,c} = ", min_dist_loc);
        //console.log("min_dist = ", min_dist);

        if (!closest_to_col) { // player clicked on a row
            let r = min_dist_loc.r;
            let c = min_dist_loc.c;
            if (this.orig_row_data[r][c] == OPEN && this.curr_row_data[r][c] == PATH) {
                this.curr_row_data[r][c] = OPEN;
                this.Redraw(this.curr_row_data, this.curr_col_data, this.orig_hole_data);
            } else if (this.orig_row_data[r][c] == OPEN && this.curr_row_data[r][c] == OPEN) {
                this.curr_row_data[r][c] = PATH;
                this.Redraw(this.curr_row_data, this.curr_col_data, this.orig_hole_data);
            } else if (this.orig_row_data[r][c] == GATE && this.curr_row_data[r][c] == EXIT) {
                this.curr_row_data[r][c] = GATE;
                this.Redraw(this.curr_row_data, this.curr_col_data, this.orig_hole_data);
            } else if (this.orig_row_data[r][c] == GATE && this.curr_row_data[r][c] == GATE) {
                this.curr_row_data[r][c] = EXIT;
                this.Redraw(this.curr_row_data, this.curr_col_data, this.orig_hole_data);
            }
        } else { // player clicked on a column
            let r = min_dist_loc.r;
            let c = min_dist_loc.c;
            if (this.orig_col_data[r][c] == OPEN && this.curr_col_data[r][c] == PATH) {
                this.curr_col_data[r][c] = OPEN;
                this.Redraw(this.curr_row_data, this.curr_col_data, this.orig_hole_data);
            } else if (this.orig_col_data[r][c] == OPEN && this.curr_col_data[r][c] == OPEN) {
                this.curr_col_data[r][c] = PATH;
                this.Redraw(this.curr_row_data, this.curr_col_data, this.orig_hole_data);
            } else if (this.orig_col_data[r][c] == GATE && this.curr_col_data[r][c] == EXIT) {
                this.curr_col_data[r][c] = GATE;
                this.Redraw(this.curr_row_data, this.curr_col_data, this.orig_hole_data);
            } else if (this.orig_col_data[r][c] == GATE && this.curr_col_data[r][c] == GATE) {
                this.curr_col_data[r][c] = EXIT;
                this.Redraw(this.curr_row_data, this.curr_col_data, this.orig_hole_data);
            }
        }
        if (this.cv()) {
            swal("Correct!", "", "success");
        }
    };

    this.cv = function() {
        for (let i = 0; i < this.R; ++i)
            for (let j = 0; j < this.C; ++j)
                this.res[i][j] = 0;

        for (let i = 0; i < this.R*this.C; ++i)
            this.adj_list[i] = [];

        // We also need to check that there are no cycles
        let num_of_4 = 0;
        for (let i = 0; i < this.R+1; ++i) {
            for (let j = 0; j < this.C; ++j) {
                let p = 0;
                if (EXIT == this.curr_row_data[i][j]) {
                    ++num_of_4;
                    p = 1;
                } else if (PATH == this.curr_row_data[i][j]) {
                    p = 1;
                }
                if (p) {
                    if (i > 0)
                        ++this.res[i-1][j];
                    if (i < this.R)
                        ++this.res[i][j];
                    if (i > 0 && i < this.R) {
                        let n1 = this.C*i + j;
                        let n2 = this.C*(i-1) + j;
                        this.adj_list[n1].push(n2);
                        this.adj_list[n2].push(n1);
                        //console.log(n1 + " <-> " + n2);
                    }
                }
            }
        }
        
        for (let i = 0; i < this.R; ++i) {
            for (let j = 0; j < this.C+1; ++j) {
                let p = 0;
                if (EXIT == this.curr_col_data[i][j]) {
                    ++num_of_4;
                    p = 1;
                } else if (PATH == this.curr_col_data[i][j]) {
                    p = 1;
                }
                if (p) {
                    if (j > 0)
                        ++this.res[i][j-1];
                    if (j < this.C)
                        ++this.res[i][j];
                    if (j > 0 && j < this.C) {
                        let n1 = this.C*i + j;
                        let n2 = this.C*i + j-1;
                        this.adj_list[n1].push(n2);
                        this.adj_list[n2].push(n1);
                        //console.log(n1 + " <-> " + n2);
                    }
                }
            }
        }



        if (num_of_4 != 2) { // single entry and exit
            return false;
        } else {
            for (let i = 0; i < this.R; ++i)
                for (let j = 0; j < this.C; ++j)
                    if (this.res[i][j] != 2) // cross every square exactly once
                        return false;
            //for (let i = 0; i < this.R * this.C; ++i)
            //    console.log(this.adj_list[i]);
            // start with a vertex which has only 1 other adjacent vertex
            let start_n = -1;
            for (let i = 0; i < this.R * this.C; ++i) {
                this.colormap[i] = 0; // 0 = unseen, 1 = discovered, 2 = visited
                if (this.adj_list[i].length == 1)
                    start_n = i;
            }
            if (start_n != -1) {
                this.DFS(start_n); // DFS over an undirected graph, so this is NOT a cycle detection
                                   // but we just make sure that the path covers all the vertices
                for (let i = 0; i < this.R * this.C; ++i)
                    if (this.colormap[i] != 2)
                        return false;
            } else
                return false; // SHOULD NOT HIT THIS AT ALL
        }
        return true;
    };

    this.DFS = function(n) {
        this.colormap[n] = 1; // discovered
        for (let i = 0; i < this.adj_list[n].length; ++i) {
            if (this.colormap[this.adj_list[n][i]] === 0)
                this.DFS(this.adj_list[n][i]);
        }
        this.colormap[n] = 2; // visited
    };

};

